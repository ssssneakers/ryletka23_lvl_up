import os


from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.types import FSInputFile

from config import admin_ids
from database import *
from games import *
from buttons import *

router = Router()
replay = True


class Bet(StatesGroup):
    next = State()


class Transfer(StatesGroup):
    name = State()
    sum = State()
    text = State()


@router.message(CommandStart())
async def start(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        database = await create_database()
        check_u = await check_user_top(user_id)
        if not database:
            await create_database()
        if check_u[0] == 0:
            await add_message(user_id, username)
            await message.answer("Hello!", reply_markup=menu_markup)
            return
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=menu_markup)
    except Exception as e:
        print(e)


@router.message(F.text == "üèÜ–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ üèÜ")
async def tab(message: Message):
    try:
        top_users = await get_top()
        leaderboard_text = '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n'
        for i, (username, money) in enumerate(top_users, start=1):
            leaderboard_text += f'{i}. üòé@{username} - {money} $\n'
        await message.answer(leaderboard_text)
    except Exception as e:
        await message.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")
        print(e)


@router.message(F.text == "üéÆ –ú–µ–Ω—é –∏–≥—ÄüéÆ")
async def menu(message: Message):
    try:
        await message.answer("–í—ã –≤ –º–µ–Ω—é:", reply_markup=games_markup)
    except Exception as e:
        print(e)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—åüë§")
async def contacts(message: Message):
    try:
        user_id = message.from_user.id
        balance = await get_balance(user_id)
        username = message.from_user.username
        await message.answer("üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:")
        await message.answer(f"üî§ –í–∞—à–µ –∏–º—è: {username}\n"
                             f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}\n"
                             f"üÜî –í–∞—à ID: {user_id}")
    except Exception as e:
        await message.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")
        print(e)


@router.message(F.text == "üíµ–ü–µ—Ä–µ–≤–æ–¥üíµ")
async def trade(message: Message, state: FSMContext):
    try:
        await state.set_state(Transfer.name)
        await message.answer("üíµ–ü–µ—Ä–µ–≤–æ–¥üíµ:")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ '@'")
    except Exception as e:
        print(e)


@router.message(Transfer.name)
async def trade_2(message: Message, state: FSMContext):
    try:
        await state.set_state(Transfer.sum)
        name = message.text
        proverka = await check_username(name)
        if proverka is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω")
            await state.clear()
            return
        await state.update_data(name=name)
        await message.answer("üíµ–ü–µ—Ä–µ–≤–æ–¥üíµ:")
        await message.answer("–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?")
    except Exception as e:
        print(e)


@router.message(Transfer.sum)
async def trade_3(message: Message, state: FSMContext):
    try:
        await state.set_state(Transfer.text)
        summa = message.text
        if summa.isdigit() is False:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        await state.update_data(sum=summa)
        user_id = message.from_user.id
        balance_user = await get_balance(user_id)
        if balance_user < int(summa):
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=menu_markup)
            await state.clear()
            return
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤:")
    except Exception as e:
        print(e)


@router.message(Transfer.text)
async def trade_4(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        Name = data.get("name")
        summa = data.get("sum")
        id_to = await check_user_id(Name)
        id_to = id_to[0]
        text = message.text
        if len(text) > 100:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤", reply_markup=menu_markup)
            await state.clear()
            return
        user_balance = await get_balance(user_id)
        user_balance -= int(summa)
        if id_to is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω")
            await state.clear()
            return
        balance_to = await get_balance(id_to)
        balance_to += int(summa)
        await edit_balance(id_to, balance_to)
        await message.bot.send_message(id_to, f"üíµ–ü–µ—Ä–µ–≤–æ–¥üíµ –æ—Ç @{message.from_user.username}:\n"
                                              f"–ù–∞ —Å—É–º–º—É: {summa}\n"
                                              f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n")

        await message.answer("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await edit_balance(user_id, user_balance)

        await state.clear()
    except Exception as e:
        print(e)


@router.callback_query(F.data == "game_1")
async def game_1(callback: CallbackQuery):
    try:
        await callback.message.edit_text("–í—ã–±–∏—Ä–∞–π:", reply_markup=game1)
    except Exception as e:
        print(e)


@router.callback_query(F.data == "rock")
async def game_1_1(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        result = await rock_paper_scissors("–∫–∞–º–µ–Ω—å")
        await callback.message.edit_text(result)
        if result == "–ü–æ–±–µ–¥–∞":
            balance = await get_balance(user_id)
            balance += 100
            await edit_balance(user_id, balance)
            await callback.message.answer(str(+100), reply_markup=game1)
        elif result == "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ":
            balance = await get_balance(user_id)
            if balance < 100:
                balance = 0
                await edit_balance(user_id, balance)
        else:
            await callback.message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", reply_markup=game1)
    except Exception as e:
        print(e)


@router.callback_query(F.data == "paper")
async def game_1_2(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        result = await rock_paper_scissors("–±—É–º–∞–≥–∞")
        await callback.message.edit_text(result)
        if result == "–ü–æ–±–µ–¥–∞":
            balance = await get_balance(user_id)
            balance += 100
            await edit_balance(user_id, balance)
            await callback.message.answer(str(+100), reply_markup=game1)
        elif result == "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ":
            balance = await get_balance(user_id)
            if balance < 100:
                balance = 0
                await edit_balance(user_id, balance)
        else:
            await callback.message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", reply_markup=game1)
    except Exception as e:
        print(e)


@router.callback_query(F.data == "scissors")
async def game_1_3(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        result = await rock_paper_scissors("–Ω–æ–∂–Ω–∏—Ü—ã")
        await callback.message.edit_text(result)
        if result == "–ü–æ–±–µ–¥–∞":
            balance = await get_balance(user_id)
            balance += 100
            await edit_balance(user_id, balance)
            await callback.message.answer(str(+100), reply_markup=game1)
        elif result == "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ":
            balance = await get_balance(user_id)
            if balance < 100:
                balance = 0
                await edit_balance(user_id, balance)
        else:
            await callback.message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", reply_markup=game1)
    except Exception as e:
        print(e)


@router.callback_query(F.data == "game_2")
async def game_2(callback: CallbackQuery):
    try:
        await callback.message.edit_text("–í—ã–±–∏—Ä–∞–π:", reply_markup=game2)
    except Exception as e:
        print(e)


@router.callback_query(F.data == "rus_roulette")
async def game_2_1(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        balance = await get_balance(user_id)
        if balance <= 0:
            await callback.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=games_markup)
            return
        user_choice = random.randint(0, 7)
        result = await russian_roulette(user_choice)
        await callback.message.edit_text(result)
        if result == "–ü–æ–±–µ–¥–∞":
            balance = balance * 2
            await edit_balance(user_id, balance)
            await callback.message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –≤ 2 —Ä–∞–∑–∞", reply_markup=game2)
        else:
            balance = 0
            await edit_balance(user_id, balance)
            await callback.message.answer("ü´°–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", reply_markup=game2)
    except Exception as e:
        print(e)


@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ãüìû")
async def contacts(message: Message):
    try:
        await message.answer("üß† –ì–µ–Ω–∏–π\n"
                             "üíº –ü–ª–µ–π–±–æ–π\n"
                             "üíµ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä\n"
                             "‚ù§Ô∏è –§–∏–ª–∞–Ω—Ç—Ä–æ–ø\n"
                             "üîó –¥–∞ –∏ –ø—Ä–æ—Å—Ç–æ: [–•–æ–∑—è–∏–Ω](https://t.me/Programist337)",
                             reply_markup=menu_markup,
                             parse_mode='Markdown')
    except Exception as e:
        print(e)
        await message.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")


@router.callback_query(F.data == "game_3")
async def game_3(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(Bet.next)
        await callback.message.answer("üòà–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:")
    except Exception as e:
        print(e)


@router.message(Bet.next)
async def bet(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        balance = await get_balance(user_id)
        bet_1 = message.text
        if balance < int(bet_1):
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return
        if int(bet_1) < 0:
            await message.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            return
        balance -= int(bet_1)
        await edit_balance(user_id, balance)
        answer, rate = await slot_machine()
        await message.answer(f'{str(rate[0])}, {str(rate[1])}, {str(rate[2])}')
        if answer == "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ":
            await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", reply_markup=game3)
        else:
            await message.answer("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏", reply_markup=game3)
            balance = balance * int(answer)
            await edit_balance(user_id, balance)
        await state.clear()
    except Exception as e:
        print(e)


@router.message(F.text == "üïπÔ∏è –ï—â–µ —Ä–∞–∑üïπÔ∏è")
async def game_3_1(message: Message, state: FSMContext):
    try:
        await state.set_state(Bet.next)
        await message.answer("üòà–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:")
    except Exception as e:
        print(e)


@router.callback_query(F.data == "back")
async def back(callback: CallbackQuery):
    try:
        await callback.message.answer("–í—ã –≤ –º–µ–Ω—é:")
    except Exception as e:
        print(e)


@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_Reply(message: Message):
    try:
        await message.answer("–í—ã –≤ –º–µ–Ω—é:", reply_markup=menu_markup)
    except Exception as e:
        print(e)


@router.message(Command('base'))
async def base(message: Message):
    try:
        user_id = message.from_user.id
        print(user_id, admin_ids)
        if str(user_id) not in admin_ids:
            await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        if os.path.exists("user_database.db"):
            await message.answer_document(FSInputFile("user_database.db"))
        else:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

    except Exception as e:
        print(e)
